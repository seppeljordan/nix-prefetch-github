#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import shutil
import subprocess
from contextlib import contextmanager
from dataclasses import dataclass
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Generator, Optional


class Main:
    def __init__(self, twine: Twine, version_getter: VersionGetter) -> None:
        self.twine = twine
        self.version = version_getter.get_version()
        self.package_name = "nix-prefetch-github"
        self.current_distribution = f"{self.package_name}-{self.version}.tar.gz"
        self.setup_path = "setup.py"
        self.distribution_directory = Path("dist")
        self.source_distribution_path = (
            self.distribution_directory / self.current_distribution
        ).resolve()
        self._egg_info_path = Path("nix_prefetch_github.egg-info").resolve()

    def run_installation_test(self) -> None:
        with self._virtualenv() as virtualenv:
            self.install_source_distribution(virtualenv)
            self.run_binaries(virtualenv)

    def run_upload_test(self) -> None:
        with self._virtualenv() as virtualenv:
            # self.upload_source_distribution()
            self.install_from_index(virtualenv)
            self.run_binaries(virtualenv)

    def install_source_distribution(self, virtualenv: Virtualenv) -> None:
        self.build_source_distribution()
        virtualenv.install(str(self.source_distribution_path))

    def run_binaries(self, virtualenv: Virtualenv) -> None:
        virtualenv.run("nix-prefetch-github --help")
        virtualenv.run("nix-prefetch-github-latest-release --help")
        virtualenv.run("nix-prefetch-github-directory --help")

    def upload_source_distribution(self) -> None:
        self.build_source_distribution()
        self.twine.upload(self.source_distribution_path)

    def install_from_index(self, virtualenv: Virtualenv) -> None:
        virtualenv.install(str(self.source_distribution_path))
        virtualenv.install_without_deps(
            f"{self.package_name}=={self.version}", index="test-pypi"
        )

    def build_source_distribution(self) -> None:
        try:
            shutil.rmtree(self._egg_info_path)
        except FileNotFoundError:
            pass
        subprocess.run(
            f"python {self.setup_path} sdist --dist-dir {self.distribution_directory}",
            shell=True,
            check=True,
        )

    @contextmanager
    def _virtualenv(self) -> Generator[Virtualenv, None, None]:
        with TemporaryDirectory() as directory:
            yield Virtualenv(Path(directory) / "virtualenv")


class VersionGetter:
    def get_version(self) -> str:
        with open("nix_prefetch_github/VERSION") as version_file:
            return version_file.read()


class Virtualenv:
    def __init__(self, target_path: Path) -> None:
        self._target_path = target_path
        subprocess.run(["virtualenv", str(self._target_path)])

    def run(self, command: str) -> None:
        env = dict(os.environ)
        try:
            del env["PYTHONPATH"]
        except KeyError:
            pass
        subprocess.run(
            str(self._target_path / "bin") + "/" + command,
            check=True,
            shell=True,
            env=env,
            cwd=self._target_path,
        )

    def install(self, target: str) -> None:
        self.run(f"pip install {target}")

    def install_without_deps(self, target: str, index: Optional[str] = None) -> None:
        self.run(f"pip install --no-deps {target} {'-i '+index if index else ''}")


class Twine:
    def upload(self, source_distribution: Path) -> None:
        subprocess.run(
            f"python -m twine upload -r test-pypi {source_distribution}",
            shell=True,
            check=True,
        )


class Configuration:
    def get(self) -> ApplicationConfiguration:
        arguments = self._parse_args()
        return ApplicationConfiguration(do_upload_test=arguments.upload_test)

    def _parse_args(self) -> argparse.Namespace:
        parser = argparse.ArgumentParser()
        parser.add_argument("--upload-test", action="store_true", dest="upload_test")
        parser.add_argument(
            "--no-upload-test", action="store_false", dest="upload_test"
        )
        return parser.parse_args()


@dataclass
class ApplicationConfiguration:
    do_upload_test: bool


if __name__ == "__main__":
    configuration = Configuration().get()
    twine = Twine()
    tester = Main(twine, VersionGetter())
    tester.run_installation_test()
    if configuration.do_upload_test:
        tester.run_upload_test()
